题目：给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

题解：
#python
#1:
class Solution:

    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:

        temp=ListNode(0)

        f=0

        re =temp

        while( l1 or l2 or f):

            if l1 and l2:

                temp.val=l1.val+l2.val+f

            elif l1:

                temp.val=l1.val+f

            elif l2:

                temp.val=l2.val+f

            else:

                temp.val=f

            f=0

            if temp.val>=10:

                temp.val =temp.val-10

                f=1

            else:

                f=0

            if (l1 and l1.next)or(l2 and l2.next)or(f)  : 

                temp.next=ListNode(0) 

                temp=temp.next

            if l1:    

                l1=l1.next

            if l2:

                l2=l2.next

        return re
#2:
class Solution:

    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        sum=0
        head=ListNode(0)
        result=head
        carry=False
        while(l1!=None or l2!=None):
            sum=0
            if(l1!=None):
                sum+=l1.val
                l1=l1.next
            if(l2!=None):
                sum+=l2.val
                l2=l2.next
            if(carry):
                sum+=1
            head.next=ListNode(sum%10)
            head=head.next
            if(sum>=10):
                carry=True
            else:
                carry=False
        if(carry):
            head.next=ListNode(1)
        return result.next
		
#cpp
#1:
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head=new ListNode(-1);//存放结果的链表
        ListNode* h=head;//移动指针
        int sum=0;//每个位的加和结果
        bool carry=false;//进位标志
        while(l1!=NULL||l2!=NULL)
        {
            sum=0;
            if(l1!=NULL)
            {
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL)
            {
                sum+=l2->val;
                l2=l2->next;
            }
            if(carry)
                sum++;
            h->next=new ListNode(sum%10);
            h=h->next;
            carry=sum>=10?true:false;
        }
        if(carry)
        {
            h->next=new ListNode(1);
        }
        return head->next;
    }
};

#2:
class Solution {
    
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int x=0, y=0, carry=0, sum=0;
        ListNode *h=NULL, **t=&h;
        
        while (l1!=NULL || l2!=NULL){
            x = getValueAndMoveNext(l1);
            y = getValueAndMoveNext(l2);
            
            sum = carry + x + y;
            
            ListNode *node = new ListNode(sum%10);
            *t = node;
            t = (&node->next);
            
            carry = sum/10;
        }
        
        if (carry > 0) {
            ListNode *node = new ListNode(carry%10);
            *t = node;
        }
        
        return h;
    }
private:
    int getValueAndMoveNext(ListNode* &l){
        int x = 0;
        if (l != NULL){
            x = l->val;
            l = l->next;
        }
        return x;
    }
};


