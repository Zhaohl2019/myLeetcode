题目：给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

题解：
#Python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap={}
        for index,first in enumerate(nums):
            second=target-first
            if second in hashmap:
                return[hashmap[second],index]
            hashmap[first]=index
        return []
	
#cpp
//一遍哈希表
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> m;
        vector<int> result;
        for(int i=0;i<nums.size();i++){
            // not found the second one
            if(m.find(nums[i])==m.end()){
                // store the first one poisition into the second one's key
                m[target-nums[i]]=i;
            }else{
                // found the second one
                result.push_back(m[nums[i]]);
                result.push_back(i);
                break;
            }
        }
        return result;
    }
};
//两遍哈希表
class Solution{
public:
    vector<int> twoSum(vector<int> &nums, int target) {
	unordered_map<int,int> m;
	vector<int> result;
	for (int i = 0;i < nums.size();i++)
    {
            m[nums[i]] = i;
    }
	for(int i=0;i<nums.size();i++){
		auto iter=m.find(target-nums[i]);
		if(iter!=m.end() && iter->second!=i){
			result.push_back(i);
			result.push_back(iter->second);
			break;
		}
	}
	return result;
	};
};
		
